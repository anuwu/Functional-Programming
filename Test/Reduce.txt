
-- Reduce function needs a (list , start value) to reduce an entire list (via some operation) to a single value.
-- This is tail recursive.

> (define (mul x y) (* x y))
> (define (my-reduce fn lst acc)
    (if (null? lst) acc
        (my-reduce fn (cdr lst) (fn (car lst) acc))))
> (my-reduce mul '(5 3 6 7) 1)
630

-- Normal implementation

(define (my-reduce fn lst start)
	(if (null? lst) start (fn (car lst) (my-reduce fn (cdr lst) start)))

